#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'


class Tinyc < Racc::Parser

module_eval(<<'...end compiler.y/module_eval...', 'compiler.y', 420)

  class Object
    def initialize(name, level, type, offset)
      @name = name
      @level = level
      @type = type
      @offset = offset
    end
    def changeType(type) 
      @type = type
    end
    attr_reader :level, :type
    attr_accessor :name, :offset
  end

  def initialize()
    @stack = []
    @level = 0
    @error_stack = []
    @error_num = 0
    @add_sp = 0
    @loop_depth = 0
  end

  def popStack(level)
    while @stack[@stack.length-1].level >= level
      if @stack[@stack.length-1].type == 'VAR'
        if @stack[@stack.length-1].level == 1
	  @add_sp -= 4
        else
	  @add_sp += 4
        end
      end
      @stack.pop
    end
  end

  def findObject(name, type)
    ret = {}
    ret['level'] = -1
    ret['size'] = -1
    i = @stack.length-1
    while i >= 0
      if @stack[i].name == name && @stack[i].type == type
        ret['level'] = @stack[i].level
        ret['size'] = @stack[i].offset
        break
      end
      i -= 1
    end
    return ret
  end

  def insertStackUndefFun(name, size)
    obj = Object.new(name, 0, 'UNDEFFUN', size)
    i = @stack.length - 1
    while i >= 0
      if @stack[i].level == 0
        break
      else
	i -= 1
      end
    end
    if i > 0
      @stack = @stack[0..(i-1)] + [obj] + @stack[i..(@stack.length-1)]
    else
      @stack = [obj] + @stack
    end	
  end

  def changeFunctionInfo(name, size)
    i = @stack.length - 1
    while i >= 0
      if @stack[i].type == 'FUN'
	@stack[i].name = name
	@stack[i].offset = size
	break
      end
      i -= 1
    end
  end

  def error(type, name, level)
    @error_num += 1
    print "error: "
    if type == 0
      puts "Variable '#{name}' is already defined at same level(level#{level})."
    elsif type == 1
      puts "Function '#{name}' is already defined at same level(level#{level})."
    elsif type == 2
      puts "Parameter-length of function '#{name}' is #{level}."
    elsif type == 3
      puts "Variable '#{name}' is NOT defined."
    elsif type == 4
      puts "continue is NOT available here."
    elsif type == 5
      puts "break is NOT available here."
    else
      puts "Undefined type."
    end
  end

  def warning(type, name, level)
    print "warning: "
    if type == 0
      puts "Variable '#{name}' is already defined at level #{level}."
    elsif type == 1
      puts "Function '#{name}' is already defined at level #{level}."
    elsif type == 2
      puts "Function '#{name}' is NOT defined."
    else
      puts "Undefined type."
    end
  end
  
  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\d+/
        @q.push [:CONSTANT, $&.to_i]
      when /\A(&&)/
        @q.push [:LOGICALAND, $&]
      when /\A(\|\|)/
        @q.push [:LOGICALOR, $&]
      when /\A(int)/
        @q.push [:DATATYPE, $&]
      when /\A(if)/
        @q.push [:IF, $&]
      when /\A(else)/
        @q.push [:ELSE, $&]
      when /\A(while)/
        @q.push [:WHILE, $&]
      when /\A(for)/
        @q.push [:FOR, $&]
      when /\A(continue)/
        @q.push [:CONTINUE, $&]
      when /\A(break)/
        @q.push [:BREAK, $&]
      when /\A(<=)/
        @q.push [:LE, $&]
      when /\A(>=)/
        @q.push [:GE, $&]
      when /\A(==)/
        @q.push [:EQUAL, $&]
      when /\A(!=)/
        @q.push [:NOTEQUAL, $&]
      when /\A(return)/
        @q.push [:RETURN, $&]
      when /\A[a-zA-Z]\w*/
	@q.push [:IDENTIFIER, $&]
      when /\A./o
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end compiler.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    35,    36,    39,   123,    40,    41,    42,    85,    86,    35,
    36,    39,    79,    40,    41,    42,     6,    78,     5,    59,
    83,    84,   118,    62,    28,    67,    76,    34,    59,    48,
    61,    77,    62,    28,    85,    86,    34,    74,    48,    61,
    35,    36,    39,    72,    40,    41,    42,    83,    84,    35,
    36,    39,    70,    40,    41,    42,    77,   119,   122,    59,
    67,    85,    86,    62,    28,    87,    88,    34,    59,    48,
    61,    80,    62,    28,    83,    84,    34,    78,    48,    61,
    35,    36,    39,    79,    40,    41,    42,    98,    67,    35,
    36,    39,    80,    40,    41,    42,    69,   120,   133,    59,
    67,    67,    68,    62,    28,   121,    67,    34,    59,    48,
    61,    59,    62,    28,    65,    62,    34,    64,    48,    61,
    59,    92,    61,    59,    62,    59,    30,    62,    59,    62,
    48,    61,    62,    92,    61,    92,    61,    59,    92,    61,
    59,    62,    59,    16,    62,    59,    62,    92,    61,    62,
    92,    61,    92,    61,    59,    48,    61,    59,    62,    59,
    30,    62,    59,    62,    92,    61,    62,    48,    61,    48,
    61,    59,    48,    61,    59,    62,    59,    28,    62,    59,
    62,    92,    61,    62,    48,    61,    48,    61,    59,    92,
    61,    59,    62,    59,    21,    62,    59,    62,    48,    61,
    62,    48,    61,    92,    61,    59,    92,    61,    59,    62,
    59,    16,    62,    59,    62,    92,    61,    62,    92,    61,
    48,    61,    59,    92,    61,    59,    62,    81,    82,    62,
    66,    67,    48,    61,    23,    92,    61,    75,    76,    87,
    88,    87,    88,    87,    88,    89,    90,    89,    90,   130,
    67,    12,    13,    81,    82,    87,    88,    89,    90,    22,
   128,    21,    16,    14,    11,    10,     5 ]

racc_action_check = [
   134,   134,   134,   103,   134,   134,   134,   108,   108,   125,
   125,   125,    51,   125,   125,   125,     1,    50,     1,   134,
   108,   108,    93,   134,   134,    93,    92,   134,   125,   134,
   134,    49,   125,   125,    54,    54,   125,    47,   125,   125,
    45,    45,    45,    43,    45,    45,    45,    54,    54,    31,
    31,    31,    41,    31,    31,    31,    99,    95,   101,    45,
    95,   109,   109,    45,    45,   110,   110,    45,    31,    45,
    45,    52,    31,    31,   109,   109,    31,   104,    31,    31,
   128,   128,   128,   105,   128,   128,   128,    71,    71,   119,
   119,   119,   106,   119,   119,   119,    40,    96,   132,   128,
    96,   132,    39,   128,   128,    97,    97,   128,   119,   128,
   128,    77,   119,   119,    36,    77,   119,    35,   119,   119,
   123,    77,    77,    82,   123,    81,    33,    82,    80,    81,
   123,   123,    80,    82,    82,    81,    81,    79,    80,    80,
    83,    79,    78,    30,    83,   121,    78,    79,    79,   121,
    83,    83,    78,    78,    84,   121,   121,    76,    84,   130,
    29,    76,    75,   130,    84,    84,    75,    76,    76,   130,
   130,    74,    75,    75,    42,    74,    70,    25,    42,    85,
    70,    74,    74,    85,    42,    42,    70,    70,    69,    85,
    85,    68,    69,    59,    23,    68,    90,    59,    69,    69,
    90,    68,    68,    59,    59,    89,    90,    90,    88,    89,
    67,    21,    88,    86,    67,    89,    89,    86,    88,    88,
    67,    67,    62,    86,    86,    87,    62,   107,   107,    87,
    37,    37,    62,    62,    20,    87,    87,    48,    48,   111,
   111,   112,   112,   113,   113,   114,   114,   115,   115,   126,
   126,     8,     8,    53,    53,    55,    55,    56,    56,    18,
   124,    17,    13,    10,     6,     5,     0 ]

racc_action_pointer = [
   264,    16,   nil,   nil,   nil,   233,   264,   nil,   221,   nil,
   237,   nil,   nil,   230,   nil,   nil,   nil,   259,   231,   nil,
   203,   179,   nil,   192,   nil,   150,   nil,   nil,   nil,   158,
   111,    46,   nil,   124,   nil,    87,    84,   200,   nil,    76,
    70,    26,   152,    14,   nil,    37,   nil,    22,   212,    17,
    -2,    -8,    53,   241,    24,   234,   241,   nil,   nil,   171,
   nil,   nil,   200,   nil,   nil,   nil,   nil,   188,   169,   166,
   154,    57,   nil,   nil,   149,   140,   135,    89,   120,   115,
   106,   103,   101,   118,   132,   157,   191,   203,   186,   183,
   174,   nil,     0,    -6,   nil,    29,    69,    75,   nil,    42,
   nil,    30,   nil,   -28,    58,    63,    74,   215,    -3,    51,
    44,   218,   220,   222,   229,   231,   nil,   nil,   nil,    86,
   nil,   123,   nil,    98,   254,     6,   219,   nil,    77,   nil,
   137,   nil,    70,   nil,    -3,   nil ]

racc_action_default = [
   -78,   -78,    -1,    -3,    -4,   -78,   -78,    -2,   -78,    -6,
    -8,   136,    -5,   -78,    -9,    -7,    -8,   -15,   -78,   -12,
   -14,   -78,   -10,   -78,   -16,   -78,   -13,   -11,   -29,   -34,
   -78,   -38,   -31,   -33,   -17,   -78,   -78,   -78,   -21,   -78,
   -78,   -78,   -78,   -78,   -35,   -37,   -39,   -41,   -71,   -43,
   -45,   -47,   -49,   -51,   -53,   -56,   -61,   -64,   -67,   -78,
   -69,   -72,   -78,   -32,   -18,   -19,   -20,   -78,   -78,   -78,
   -78,   -78,   -30,   -36,   -78,   -78,   -77,   -78,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
   -78,   -68,   -71,   -78,   -40,   -78,   -78,   -78,   -28,   -44,
   -42,   -78,   -74,   -76,   -46,   -48,   -50,   -52,   -54,   -55,
   -57,   -58,   -59,   -60,   -62,   -63,   -65,   -66,   -73,   -78,
   -24,   -78,   -70,   -78,   -22,   -78,   -78,   -75,   -78,   -25,
   -78,   -23,   -78,   -26,   -78,   -27 ]

racc_goto_table = [
    44,    71,    94,    91,    15,    32,    43,    19,   125,    63,
   100,   102,    24,    26,    73,   110,   111,   112,   113,   108,
   109,    93,   114,   115,     2,     7,   134,    95,    96,    97,
    31,    25,    33,   116,   117,    29,    45,    17,    99,   104,
   105,   106,   107,    20,    27,    18,     1,   101,   103,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,   132,
   nil,   nil,   nil,   nil,   129,   nil,   nil,   131,   nil,   nil,
   nil,   nil,   nil,   135 ]

racc_goto_check = [
    13,    14,    22,    32,     6,     3,    18,    12,    15,     3,
    22,    22,     6,    12,    13,    30,    30,    30,    30,    29,
    29,    14,    31,    31,     2,     2,    16,    14,    14,    14,
    17,    11,    19,    32,    32,    20,    21,    10,    24,    25,
    26,    27,    28,     9,     8,     7,     1,    35,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    14,
   nil,   nil,   nil,   nil,    13,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,    13 ]

racc_goto_pointer = [
   nil,    46,    24,   -24,   nil,   nil,    -9,    28,    19,    26,
    23,     9,   -10,   -31,   -41,  -112,  -107,     1,   -25,     3,
     7,     5,   -65,   nil,   -36,   -38,   -38,   -38,   -38,   -62,
   -68,   -65,   -56,   nil,   nil,   -29,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     8,     9,   nil,    38,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    47,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    60,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 35, :_reduce_1,
  2, 35, :_reduce_2,
  1, 36, :_reduce_3,
  1, 36, :_reduce_4,
  3, 37, :_reduce_5,
  1, 39, :_reduce_6,
  3, 39, :_reduce_7,
  1, 40, :_reduce_none,
  0, 44, :_reduce_9,
  0, 45, :_reduce_10,
  8, 38, :_reduce_11,
  1, 43, :_reduce_12,
  3, 43, :_reduce_13,
  1, 41, :_reduce_none,
  0, 41, :_reduce_15,
  2, 46, :_reduce_16,
  1, 47, :_reduce_17,
  2, 47, :_reduce_18,
  2, 47, :_reduce_19,
  2, 47, :_reduce_20,
  1, 47, :_reduce_none,
  5, 47, :_reduce_22,
  7, 47, :_reduce_23,
  0, 49, :_reduce_24,
  6, 47, :_reduce_25,
  0, 50, :_reduce_26,
  10, 47, :_reduce_27,
  3, 47, :_reduce_28,
  0, 54, :_reduce_29,
  5, 42, :_reduce_30,
  1, 53, :_reduce_none,
  2, 53, :_reduce_32,
  1, 51, :_reduce_none,
  0, 51, :_reduce_none,
  1, 55, :_reduce_none,
  2, 55, :_reduce_36,
  1, 52, :_reduce_none,
  0, 52, :_reduce_none,
  1, 48, :_reduce_39,
  3, 48, :_reduce_40,
  1, 56, :_reduce_none,
  3, 56, :_reduce_42,
  1, 57, :_reduce_none,
  3, 57, :_reduce_44,
  1, 58, :_reduce_none,
  3, 58, :_reduce_46,
  1, 59, :_reduce_none,
  3, 59, :_reduce_48,
  1, 60, :_reduce_none,
  3, 60, :_reduce_50,
  1, 61, :_reduce_none,
  3, 61, :_reduce_52,
  1, 62, :_reduce_none,
  3, 62, :_reduce_54,
  3, 62, :_reduce_55,
  1, 63, :_reduce_none,
  3, 63, :_reduce_57,
  3, 63, :_reduce_58,
  3, 63, :_reduce_59,
  3, 63, :_reduce_60,
  1, 64, :_reduce_none,
  3, 64, :_reduce_62,
  3, 64, :_reduce_63,
  1, 65, :_reduce_none,
  3, 65, :_reduce_65,
  3, 65, :_reduce_66,
  1, 66, :_reduce_none,
  2, 66, :_reduce_68,
  1, 67, :_reduce_none,
  4, 67, :_reduce_70,
  1, 68, :_reduce_71,
  1, 68, :_reduce_none,
  3, 68, :_reduce_73,
  1, 70, :_reduce_74,
  3, 70, :_reduce_75,
  1, 69, :_reduce_none,
  0, 69, :_reduce_none ]

racc_reduce_n = 78

racc_shift_n = 136

racc_token_table = {
  false => 0,
  :error => 1,
  :DATATYPE => 2,
  :CONTINUE => 3,
  :BREAK => 4,
  :IF => 5,
  :ELSE => 6,
  :WHILE => 7,
  :FOR => 8,
  :RETURN => 9,
  :LE => 10,
  :GE => 11,
  :EQUAL => 12,
  :NOTEQUAL => 13,
  :LOGICALAND => 14,
  :LOGICALOR => 15,
  "*" => 16,
  "/" => 17,
  "&" => 18,
  "|" => 19,
  "^" => 20,
  "+" => 21,
  "-" => 22,
  "<" => 23,
  ">" => 24,
  "=" => 25,
  "(" => 26,
  "{" => 27,
  ")" => 28,
  "}" => 29,
  ";" => 30,
  "," => 31,
  :IDENTIFIER => 32,
  :CONSTANT => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DATATYPE",
  "CONTINUE",
  "BREAK",
  "IF",
  "ELSE",
  "WHILE",
  "FOR",
  "RETURN",
  "LE",
  "GE",
  "EQUAL",
  "NOTEQUAL",
  "LOGICALAND",
  "LOGICALOR",
  "\"*\"",
  "\"/\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"+\"",
  "\"-\"",
  "\"<\"",
  "\">\"",
  "\"=\"",
  "\"(\"",
  "\"{\"",
  "\")\"",
  "\"}\"",
  "\";\"",
  "\",\"",
  "IDENTIFIER",
  "CONSTANT",
  "$start",
  "program",
  "external_declaration",
  "declaration",
  "function_definition",
  "declarator_list",
  "declarator",
  "parameter_type_list_opt",
  "compound_statement",
  "parameter_type_list",
  "@1",
  "@2",
  "parameter_declaration",
  "statement",
  "expression",
  "@3",
  "@4",
  "declaration_list_opt",
  "statement_list_opt",
  "declaration_list",
  "@5",
  "statement_list",
  "assign_expr",
  "logical_OR_expr",
  "logical_AND_expr",
  "or_expr",
  "xor_expr",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "posifix_expr",
  "primary_expr",
  "argument_expression_list_opt",
  "argument_expression_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'compiler.y', 32)
  def _reduce_1(val, _values, result)
    	  if @error_num > 0
            result = ''
          end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 38)
  def _reduce_2(val, _values, result)
    	  if @error_num > 0
            result = ''
          else
	    result = val[0] + val[1] 
          end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 47)
  def _reduce_3(val, _values, result)
    	result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 51)
  def _reduce_4(val, _values, result)
    	result = [val[0]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 56)
  def _reduce_5(val, _values, result)
    	  result = []
	  for i in val[1]
	    check = findObject(i, 'VAR')
	    if check['level'] == @level
	      error(0, i, check['level'])
	    else
  	      check2 = findObject(i, 'FUN')
	      if check2['level'] == @level
	        error(1, i, check2['level']) 
	      else
	        if check['level'] >= 0
	          warning(0, i, check['level'])
                end
                if check2['level'] >= 0
	          warning(1, i, check2['level'])
		end
		@stack.push(Object.new(i, @level, 'VAR', 0))
	      end
	    end
	    @add_sp -= 4
	    i += ':VAR:level' + @level.to_s
            if @level > 0
              i += "(#{@add_sp})"
	    end
	    result += [ [val[0], i ] ]
	  end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 86)
  def _reduce_6(val, _values, result)
    	  result = [val[0]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 90)
  def _reduce_7(val, _values, result)
    	  result += [val[2]]
        
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'compiler.y', 97)
  def _reduce_9(val, _values, result)
              @level += 1
	  @add_sp = 4
	  @stack.push(Object.new('_UNKNOWN', 0, 'FUN', 0))
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 103)
  def _reduce_10(val, _values, result)
    	  @add_sp = 0
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 107)
  def _reduce_11(val, _values, result)
    	  popStack(@level)
	  @level -= 1
  	  check = findObject(val[1], 'VAR')
	  if check['level'] >= 0
	    error(0, val[1], check['level'])
	  else
  	    check2 = findObject(val[1], 'FUN')
	    if check2['level'] >= 0
	      error(1, val[1], check2['level'])
	    else
	      if val[4] == nil
                changeFunctionInfo(val[1], 0)
	      else
                changeFunctionInfo(val[1], val[4].length)
              end
	    end
	  end
	  while @error_stack.length > 0
            obj = @error_stack.pop
  	    check = findObject(obj.name, 'FUN')
	    if check['level'] < 0
	      warning(2, obj.name, -1)
	      insertStackUndefFun(obj.name, obj.offset)
	    elsif obj.offset != check['size']
	      error(2, obj.name, check['size'])
	    end	    
          end
	  result = [ [val[0], val[1]+':FUN:level0'], val[4], val[7] ]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 139)
  def _reduce_12(val, _values, result)
    	  result = [val[0]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 143)
  def _reduce_13(val, _values, result)
              result = val[0] + [val[2]]
        
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'compiler.y', 149)
  def _reduce_15(val, _values, result)
    	result = []
      
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 154)
  def _reduce_16(val, _values, result)
    	  check = findObject(val[1], 'VAR')
	  if check['level'] == @level
	    error(0, val[1], check['level'])
	  else
  	    check2 = findObject(val[1], 'FUN')
	    if check2['level'] == @level
	      error(1, val[1], check2['level']) 
	    else
	      if check['level'] >= 0
	        warning(0, val[1], check['level'])
              end
	      if check2['level'] >= 0
	        warning(1, val[1], check2['level'])
	      end
  	      @stack.push(Object.new(val[1], @level, 'VAR', 0))
	      @add_sp += 4
	      val[1] += ':VAR:level' + @level.to_s + "(#{@add_sp})"
	    end
	  end
	  result = [val[0], val[1]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 178)
  def _reduce_17(val, _values, result)
    	  result = ''
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 182)
  def _reduce_18(val, _values, result)
    	  if @loop_depth == 0
	    error(4, -1, -1)
	  end
	  result = [['CONTINUE']]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 189)
  def _reduce_19(val, _values, result)
    	  if @loop_depth == 0
	    error(5, -1, -1)
	  end
	  result = [['BREAK']]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 196)
  def _reduce_20(val, _values, result)
    	  result = val[0]
        
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'compiler.y', 201)
  def _reduce_22(val, _values, result)
    	  result = [['IF'] + val[2] + [val[4], []]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 205)
  def _reduce_23(val, _values, result)
    	  result = [['IF'] + val[2] + [val[4], val[6]]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 209)
  def _reduce_24(val, _values, result)
    	  @loop_depth += 1
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 213)
  def _reduce_25(val, _values, result)
    	  @loop_depth -= 1
	  result = [['WHILE'] + val[2] + [val[5]]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 218)
  def _reduce_26(val, _values, result)
    	  @loop_depth += 1
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 222)
  def _reduce_27(val, _values, result)
    	  @loop_depth -= 1
	  result = [['FOR'] + val[4] + val[2] + val[6] + [val[9]]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 227)
  def _reduce_28(val, _values, result)
    	  result = [['RETURN'] + val[1]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 232)
  def _reduce_29(val, _values, result)
    	  @level += 1
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 236)
  def _reduce_30(val, _values, result)
    	  popStack(@level)
	  @level -= 1
	  result = []
          if val[2] != nil
	    result += val[2]
	  end
	  if val[3] != nil
	    result += val[3]
	  end
        
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'compiler.y', 250)
  def _reduce_32(val, _values, result)
    	  result = [val[0], val[1]]
        
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'compiler.y', 259)
  def _reduce_36(val, _values, result)
    	  result = val[0] + val[1]
        
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'compiler.y', 267)
  def _reduce_39(val, _values, result)
    	  result = [val[0]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 271)
  def _reduce_40(val, _values, result)
    	  result = [val[0], val[2]]
        
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'compiler.y', 277)
  def _reduce_42(val, _values, result)
      	  check = findObject(val[0], 'VAR')
	  if check['level'] < 0
	    error(3, val[0], -1)
	  end
	  val[0] += ":VAR:level#{check['level']}"
	  result = ['=', val[0], val[2]]
        
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'compiler.y', 288)
  def _reduce_44(val, _values, result)
    	  result = ['||', val[0], val[2]]
        
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'compiler.y', 294)
  def _reduce_46(val, _values, result)
    	  result = ['&&', val[0], val[2]]
        
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'compiler.y', 300)
  def _reduce_48(val, _values, result)
    	  result = ['|', val[0], val[2]]
        
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'compiler.y', 306)
  def _reduce_50(val, _values, result)
    	  result = ['^', val[0], val[2]]
        
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'compiler.y', 312)
  def _reduce_52(val, _values, result)
    	  result = ['&', val[0], val[2]]
        
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'compiler.y', 318)
  def _reduce_54(val, _values, result)
    	  result = ['==', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 322)
  def _reduce_55(val, _values, result)
    	  result = ['!=', val[0], val[2]]
        
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'compiler.y', 328)
  def _reduce_57(val, _values, result)
    	  result = ['<', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 332)
  def _reduce_58(val, _values, result)
    	  result = ['>', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 336)
  def _reduce_59(val, _values, result)
    	  result = ['<=', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 340)
  def _reduce_60(val, _values, result)
    	  result = ['>=', val[0], val[2]]
        
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'compiler.y', 346)
  def _reduce_62(val, _values, result)
    	  result = ['+', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 350)
  def _reduce_63(val, _values, result)
    	  result = ['-', val[0], val[2]]
        
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'compiler.y', 356)
  def _reduce_65(val, _values, result)
    	  result = ['*', val[0], val[2]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 360)
  def _reduce_66(val, _values, result)
    	  result = ['/', val[0], val[2]]
        
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'compiler.y', 366)
  def _reduce_68(val, _values, result)
    	  result = -(val[1].to_i).to_s
        
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'compiler.y', 372)
  def _reduce_70(val, _values, result)
      	  check = findObject(val[0], 'FUN')
	  if check['level'] < 0
            if val[2] != nil
	      @error_stack.push(Object.new(val[0], 0, 'UNDEFFUN', val[2].length))
	    else
	      @error_stack.push(Object.new(val[0], 0, 'UNDEFFUN', 0))
            end
	  elsif (val[2] == nil && check['size'] != 0) || val[2].length != check['size']
	    error(2, val[0], check['size'])
	  end
          if val[2] == nil
	    result = ['FCALL',val[0], []]
	  else
	    result = ['FCALL',val[0]] + [val[2]]
          end
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 391)
  def _reduce_71(val, _values, result)
      	  check = findObject(val[0], 'VAR')
	  if check['level'] < 0
	    error(3, val[0], -1)
	  end
	  val[0] += ":VAR:level#{check['level']}"
          result = val[0]
	
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'compiler.y', 401)
  def _reduce_73(val, _values, result)
    	  result = [val[1]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 406)
  def _reduce_74(val, _values, result)
    	  result = [val[0]]
        
    result
  end
.,.,

module_eval(<<'.,.,', 'compiler.y', 410)
  def _reduce_75(val, _values, result)
    	  result = val[0] + [val[2]]
        
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Tinyc


# 書き出すアセンブリファイル名
$filename = ARGV[0]
if $filename == nil
  $filename = "test.asm"
end
$file = open($filename, "w")

# 宣言された関数名のリスト
$functions = []

# 宣言されたローカル変数名(レベル含む)のリスト
$local_vars = {}

# 宣言されたIF文の数
$local_ifs = 0

# 宣言されたWHILE文の数
$local_whiles = 0

# 宣言された論理演算数
$local_logicals = 0

# 関数culcNLocal用
$n_local = 0



# アセンブリコードを生成する
def generateAssemble(tree)
  # アセンブリコードを1行書き出す
  def putsFile(a, b=nil, c=nil, d=nil)
    $file.print("#{a}") if a != nil
    $file.print("\t#{b}") if b != nil
    $file.print("\t#{c}") if c != nil
    $file.print(", #{d}") if d != nil
    $file.puts("")
  end


  # そのノードから下に伸びるノード中で使われる相対番地の絶対値の最大値を求める
  # 大域変数$n_localに書き出される
  def culcNLocal(node)
    for n in node
      if n[0] == "int"
        n[1] =~ /.+:.+:level.+\(-(.+)\)/
        $n_local = $1.to_i if $1.to_i > $n_local
      elsif n[0] == "WHILE"
        culcNLocal(n[2])
      elsif n[0] == "IF"
        culcNLocal(n[2])
        culcNLocal(n[3])
      end
    end
  end


  # そのノード以下に未定義関数が存在すれば、EXTERN宣言する
  def writeExtern(node)
    if node.instance_of?(Array) == true
      if node[0] == "FCALL"
        if $functions.index(node[1]) == nil
          putsFile(nil, "EXTERN", node[1])          
        end
      else
        for n in node
          writeExtern(n)
        end
      end
    end
  end


  # 数あるいは"#{name}:#{type}:level#{level}"を、コード形式に変換して返す
  def leafToCode(leaf)
    if leaf.instance_of?(String) == true
      if $local_vars[leaf] == nil
        leaf =~ /(.+):.+:level.+/
        return "[#{$1}]"
      elsif $local_vars[leaf] >= 0
        return "[ebp+#{$local_vars[leaf]}]"
      else
        return "[ebp#{$local_vars[leaf]}]"
      end
    else
      return "#{leaf}"
    end
  end

  
  # 木を掘り進んで順番にコードを生成する
  def digTree(parent_node, child_node, lvl=-1, jmp_whiles=-1)
    # 比較演算ノードを渡して、比較演算を行うコードを出力する
    def writeComp(base_node, lv)
      def comp(node, lev)
        # 先頭要素が比較演算子
        if node[2].instance_of?(String) == true || node[2].instance_of?(Fixnum) == true
          putsFile(nil, "mov", "eax", leafToCode(node[2]))          
          putsFile(nil, "push", "eax")
        else
          digTree(node, node[2], lev + 1)
          putsFile(nil, "push", "eax")
        end
        if node[1].instance_of?(String) == true || node[1].instance_of?(Fixnum) == true
          putsFile(nil, "mov", "eax", leafToCode(node[1]))
        else
          digTree(node, node[1], lev + 1)
        end
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "cmp", "eax", "ebx")                
        case node[0]
        when "=="
          putsFile(nil, "sete", "al")                  
        when "!="
          putsFile(nil, "setne", "al")                  
        when ">"
          putsFile(nil, "setg", "al")                  
        when "<"
          putsFile(nil, "setl", "al")                  
        when ">="
          putsFile(nil, "setge", "al")                  
        when "<="
          putsFile(nil, "setle", "al")                  
        end
        putsFile(nil, "movzx", "eax", "al")
        putsFile(nil, "cmp", "eax", 0)
      end
      
      def logical(node, lv)
        # 先頭要素が論理演算子
        case node[0]
        when "&&"
          $file.puts("; && ここから(#{node[1]}, #{node[2]})")
          putsFile(nil, "mov", "eax", "0")
          putsFile(nil, "push", "eax")          
          if node[1][0].instance_of?(String) == false
            digLogical(node[1], lv)
          elsif node[1][0] == "&&" || node[1][0] == "||"
            logical(node[1], lv)
          else
            comp(node[1], lv)
          end
          logicals = $local_logicals
          $local_logicals += 1        
          putsFile(nil, "cmp", "eax", "0")          
          putsFile(nil, "je", "#{$functions[$functions.length-1]}_logical#{logicals}")
          if node[2][0].instance_of?(String) == false
            digLogical(node[2], lv)            
          elsif node[2][0] == "&&" || node[2][0] == "||"
            logical(node[2], lv)
          else
            comp(node[2], lv)
          end
          putsFile(nil, "cmp", "eax", "0")          
          putsFile(nil, "je", "#{$functions[$functions.length-1]}_logical#{logicals}")
          putsFile(nil, "pop", "eax")
          putsFile(nil, "mov", "eax", "1")
          putsFile(nil, "push", "eax")          
          $file.puts("#{$functions[$functions.length-1]}_logical#{logicals}:")
          putsFile(nil, "pop", "eax")          
          putsFile(nil, "cmp", "eax", 0)
          $file.puts("; && ここまで(#{node[1]}, #{node[2]})")        
        when "||"
          $file.puts("; || ここから(#{node[1]}, #{node[2]})")
          putsFile(nil, "mov", "eax", "1")
          putsFile(nil, "push", "eax")          
          if node[1][0].instance_of?(String) == false
            digLogical(node[1], lv)            
          elsif node[1][0] == "&&" || node[1][0] == "||"
            logical(node[1], lv)
          else
            comp(node[1], lv)
          end
          logicals = $local_logicals
          $local_logicals += 1        
          putsFile(nil, "cmp", "eax", "0")          
          putsFile(nil, "jne", "#{$functions[$functions.length-1]}_logical#{logicals}")
          if node[2][0].instance_of?(String) == false
            digLogical(node[2], lv)            
          elsif node[2][0] == "&&" || node[2][0] == "||"
            logical(node[2], lv)
          else
            comp(node[2], lv)
          end
          putsFile(nil, "cmp", "eax", "0")          
          putsFile(nil, "jne", "#{$functions[$functions.length-1]}_logical#{logicals}")
          putsFile(nil, "pop", "eax")
          putsFile(nil, "mov", "eax", "0")
          putsFile(nil, "push", "eax")          
          $file.puts("#{$functions[$functions.length-1]}_logical#{logicals}:")
          putsFile(nil, "pop", "eax")          
          putsFile(nil, "cmp", "eax", 0)
          $file.puts("; || ここまで(#{node[1]}, #{node[2]})")        
        end
      end
      def digLogical(node, lev)
        # 論理演算のノードを掘り進む
        if node[0].instance_of?(String) == false
          digLogical(node[0], lev + 1)
        elsif node[0] == "&&" || node[0] == "||"
          logical(node, lev)
        else
          comp(node, lev)
        end
      end
      
      digLogical(base_node, lv)
    end


    # 算術演算のアセンブリコード(前半共通部分)
    def writeCompute(node, lev)
      if node[2].instance_of?(String) == true || node[2].instance_of?(Fixnum) == true
        putsFile(nil, "mov", "eax", leafToCode(node[2]))          
        putsFile(nil, "push", "eax")
      else
        digTree(node, node[2], lev + 1)
        putsFile(nil, "push", "eax")
      end
      if node[1].instance_of?(String) == true || node[1].instance_of?(Fixnum) == true
        putsFile(nil, "mov", "eax", leafToCode(node[1]))
      else
        digTree(node, node[1], lev + 1)
      end      
    end


    # 現在見ているノード(配列)が最も深いノードか調べる
    leaf = true
    for n in child_node
      if n.instance_of?(String) == false
        leaf = false
        break
      end
    end


    # ノードの先頭要素が文字列なら、再帰的にコード生成処理を行う
    # 宣言文以外で葉だったなら、再帰末端用コードを生成する
    if child_node[0].instance_of?(String) == true
      case child_node[0]
      when "int"
        # 関数宣言または変数宣言
        # 関数 => ("int", "#{name}:#{type}:level#{level}")
        # 変数 => ("int", "#{name}:#{type}:level#{level}(#{pos})")
        child_node[1] =~ /(.+):(.+):(.+)/
        name = $1
        type = $2
        level = $3
        pos = nil
        if level.index("level0") == nil
          # パラメータかローカル変数
          child_node[1] =~ /(.+):(.+):level(.+)\((.+)\)/
          level = $3.to_i
          pos = $4.to_i
        else
          # 大域関数か大域変数
          level =~ /level(.+)/
          level = $1.to_i
        end
        if level == 0
          # 大域関数か大域変数のとき
          if type == "VAR"
            # 大域変数のとき
            putsFile(nil, "GLOBAL", name)
            putsFile(nil, "COMMON", "#{name} 4")
          elsif type == "FUN"
            # 大域関数の時
            $functions.push(name)
            writeExtern(parent_node[2])
            putsFile(nil, "GLOBAL", name)
            putsFile("#{name}:")           
            putsFile(nil, "push", "ebp")           
            putsFile(nil, "mov", "ebp", "esp")
            $n_local = 0
            culcNLocal(parent_node[2])
            putsFile(nil, "sub", "esp", "#{$n_local}")
            
            $file.puts("; 関数#{name}の本体ここから")
            for grandchild in parent_node[1]
              digTree(child_node, grandchild, lvl + 1, jmp_whiles)
            end
            for grandchild in parent_node[2]
              digTree(child_node, grandchild, lvl + 1, jmp_whiles)
            end
            $file.puts("; 関数#{name}の本体ここまで")
            
            putsFile("#{name}_ret:")
            putsFile(nil, "mov", "esp", "ebp")
            putsFile(nil, "pop", "ebp")
            putsFile(nil, "ret")
            $local_vars.clear
            $local_ifs = 0
            $local_whiles = 0
            $local_logicals = 0
          end
        else
          $local_vars["#{name}:#{type}:level#{level}"] = pos
          $file.puts("; local_vars: #{name}:#{type}:level#{level} => #{pos}")
        end
      when "WHILE"
        $file.puts("; WHILEここから")
        whiles = $local_whiles
        $local_whiles += 1
        $file.puts("#{$functions[$functions.length-1]}_whilestart#{whiles}:")
        writeComp(child_node[1], lvl)
        putsFile(nil, "je", "#{$functions[$functions.length-1]}_whileend#{whiles}")
        for grandchild in child_node[2]
          digTree(child_node[2], grandchild, lvl + 1, whiles)
        end
        putsFile(nil, "jmp", "#{$functions[$functions.length-1]}_whilestart#{whiles}")
        $file.puts("#{$functions[$functions.length-1]}_whilemid#{whiles}:")
        $file.puts("#{$functions[$functions.length-1]}_whileend#{whiles}:")
        $file.puts("; WHILEここまで")
      when "FOR"
        $file.puts("; FORここから")
        digTree(child_node, child_node[2], lvl, jmp_whiles)
        whiles = $local_whiles
        $local_whiles += 1
        $file.puts("#{$functions[$functions.length-1]}_whilestart#{whiles}:")
        writeComp(child_node[1], lvl)
        putsFile(nil, "je", "#{$functions[$functions.length-1]}_whileend#{whiles}")
        for grandchild in child_node[4]
          digTree(child_node[4], grandchild, lvl + 1, whiles)
        end
        $file.puts("#{$functions[$functions.length-1]}_whilemid#{whiles}:")
        digTree(child_node, child_node[3], lvl, jmp_whiles)
        putsFile(nil, "jmp", "#{$functions[$functions.length-1]}_whilestart#{whiles}")
        $file.puts("#{$functions[$functions.length-1]}_whileend#{whiles}:")
        $file.puts("; FORここまで")
      when "IF"
        $file.puts("; IFここから")
        ifs = $local_ifs
        $local_ifs += 1
        writeComp(child_node[1], lvl)
        putsFile(nil, "je", "#{$functions[$functions.length-1]}_if#{ifs}")
        for grandchild in child_node[2]
          digTree(child_node[2], grandchild, lvl + 1, jmp_whiles)
        end
        $file.puts("#{$functions[$functions.length-1]}_if#{ifs}:")
        $file.puts("; この先else")
        for grandchild in child_node[3]
          digTree(child_node[3], grandchild, lvl + 1, jmp_whiles)
        end
        $file.puts("; IFここまで")
      when "CONTINUE"
        $file.puts("; CONTINUEここから")
        putsFile(nil, "jmp", "#{$functions[$functions.length-1]}_whilemid#{jmp_whiles}")        
        $file.puts("; CONTINUEここまで")
      when "BREAK"
        $file.puts("; BREAKここから")
        putsFile(nil, "jmp", "#{$functions[$functions.length-1]}_whileend#{jmp_whiles}")        
        $file.puts("; BREAKここまで")
      when "FCALL"
        child_node[2].length.times do |i|
          if child_node[2][child_node[2].length-1-i].instance_of?(String) == true || child_node[2][child_node[2].length-1-i].instance_of?(Fixnum) == true
            putsFile(nil, "mov", "eax", leafToCode(child_node[2][child_node[2].length-1-i]))
          else
            digTree(child_node[2], child_node[2][child_node[2].length-1-i], lvl + 1, jmp_whiles)
          end
          putsFile(nil, "push", "eax")
        end
        putsFile(nil, "call", child_node[1])
        child_node[2].length.times do |i|
          putsFile(nil, "pop", "ebx")
        end
      when "RETURN"
        # 戻り値をeaxに設定してreturnラベルに飛ぶ
        if child_node[1].instance_of?(String) == true || child_node[1].instance_of?(Fixnum) == true
          putsFile(nil, "mov", "eax", leafToCode(child_node[1]))
        else
          digTree(child_node, child_node[1], lvl + 1, jmp_whiles)
        end
        putsFile(nil, "jmp", "#{$functions[$functions.length - 1]}_ret")        

      when "="
        # 代入命令
        $file.puts("; = ここから(#{child_node[1]}, #{child_node[2]})")
        if child_node[2].instance_of?(String) == true
          putsFile(nil, "mov", leafToCode(child_node[1]), leafToCode(child_node[2]))
        elsif child_node[2].instance_of?(Fixnum) == true
          putsFile(nil, "mov", "eax", leafToCode(child_node[2]))
          putsFile(nil, "mov", leafToCode(child_node[1]), "eax")          
        else
          digTree(child_node, child_node[2], lvl + 1, jmp_whiles)
          putsFile(nil, "mov", leafToCode(child_node[1]), "eax")
        end
        $file.puts("; = ここまで(#{child_node[1]}, #{child_node[2]})")
      when "+"
        # 加算命令
        $file.puts("; + ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "add", "eax", "ebx")
        $file.puts("; + ここまで(#{child_node[1]}, #{child_node[2]})")
      when "-"
        # 減算命令
        $file.puts("; - ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "sub", "eax", "ebx")
        $file.puts("; - ここまで(#{child_node[1]}, #{child_node[2]})")
      when "*"
        # 乗算命令
        $file.puts("; * ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "imul", "eax", "ebx")
        $file.puts("; * ここまで(#{child_node[1]}, #{child_node[2]})")
      when "/"
        # 除算命令
        $file.puts("; / ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "cdq")
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "idiv", "dword ebx")
        $file.puts("; / ここまで(#{child_node[1]}, #{child_node[2]})")
      when "|"
        # OR命令
        $file.puts("; | ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "or", "eax", "ebx")
        $file.puts("; | ここまで(#{child_node[1]}, #{child_node[2]})")
      when "^"
        # XOR命令
        $file.puts("; ^ ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "xor", "eax", "ebx")
        $file.puts("; ^ ここまで(#{child_node[1]}, #{child_node[2]})")
      when "&"
        # AND命令
        $file.puts("; & ここから(#{child_node[1]}, #{child_node[2]})")
        writeCompute(child_node, lvl)
        putsFile(nil, "pop", "ebx")        
        putsFile(nil, "and", "eax", "ebx")
        $file.puts("; & ここまで(#{child_node[1]}, #{child_node[2]})")
      end    

    else
      if lvl < 0
        for grandchild in child_node
          digTree(child_node, grandchild, lvl + 1, jmp_whiles)
        end
      else
          digTree(child_node, child_node[0], lvl + 1, jmp_whiles)        
      end
    end
  end
  digTree(nil, tree)
end





parser = Tinyc.new

str = ''
while true
  add = gets
  if add == nil
    break
  else
    str += add
  end
end
if str != nil
  begin
    tree = parser.parse(str)
    puts "parse success!!!"
    puts " result => \n#{tree}"
    generateAssemble(tree)
  rescue ParseError
    puts $!
  end
end
