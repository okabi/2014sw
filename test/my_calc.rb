#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

# $Id: calc.y,v 1.4 2005/11/20 13:29:32 aamine Exp $
class Calcp < Racc::Parser

module_eval(<<'...end my_calc.y/module_eval...', 'my_calc.y', 30)
  
  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\d+/
        @q.push [:NUMBER, $&.to_i]
      when /\A\w+/
	@q.push [:IDENT, $&]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end my_calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,     8,     9,    12,     5,     5,    21,     4,     4,
     6,     6,     5,     5,     3,     4,     4,     6,     6,     5,
     5,     7,     4,     4,     6,     6,     5,    10,    11,     4,
    14,     6,    10,    11,     8,     9,    12,    10,    11,     8,
     9,    12,    10,    11,    15 ]

racc_action_check = [
    13,    13,    13,    13,    13,     4,    12,    13,     4,    12,
     4,    12,     0,    11,     0,     0,    11,     0,    11,    10,
     8,     1,    10,     8,    10,     8,     9,    17,    17,     9,
     5,     9,    20,    20,    20,    20,    20,     2,     2,     2,
     2,     2,    16,    16,     7 ]

racc_action_pointer = [
     6,    21,    34,   nil,    -1,    19,   nil,    44,    14,    20,
    13,     7,     0,    -3,   nil,   nil,    39,    24,   nil,   nil,
    29,   nil ]

racc_action_default = [
    -3,   -12,    -1,    -2,   -12,   -12,   -11,   -12,   -12,   -12,
   -12,   -12,   -12,   -12,    -9,    22,    -4,    -5,    -6,    -7,
   -10,    -8 ]

racc_goto_table = [
     2,     1,   nil,   nil,    13,   nil,   nil,   nil,    16,    17,
    18,    19,    20 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2,   nil,   nil,   nil,     2,     2,
     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  1, 13, :_reduce_2,
  0, 13, :_reduce_3,
  3, 14, :_reduce_4,
  3, 14, :_reduce_5,
  3, 14, :_reduce_6,
  3, 14, :_reduce_7,
  3, 14, :_reduce_8,
  2, 14, :_reduce_9,
  3, 14, :_reduce_10,
  1, 14, :_reduce_none ]

racc_reduce_n = 12

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "^" => 7,
  :IDENT => 8,
  "(" => 9,
  ")" => 10,
  :NUMBER => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"^\"",
  "IDENT",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'my_calc.y', 13)
  def _reduce_2(val, _values, result)
    puts "IDENT: #{val[0]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 14)
  def _reduce_3(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 16)
  def _reduce_4(val, _values, result)
     result += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 17)
  def _reduce_5(val, _values, result)
     result -= val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 18)
  def _reduce_6(val, _values, result)
     result *= val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 19)
  def _reduce_7(val, _values, result)
     result /= val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 20)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 21)
  def _reduce_9(val, _values, result)
     result = -val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'my_calc.y', 22)
  def _reduce_10(val, _values, result)
     result **= val[2] 
    result
  end
.,.,

# reduce 11 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Calcp


parser = Calcp.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts "= #{parser.parse(str)}"
  rescue ParseError
    puts $!
  end
end
